'''IMPORTANT''': NEC/Renesas uPD720200/uPD720200A USB 3.0 users, please upgrade your drivers to [http://www.station-drivers.com/index.php/downloads/Drivers/Renesas-Nec/USB-3.0/ version 2.1.16.0 or later] if you are running Windows 7 or earlier version.
uPD720201/uPD720202 users should use [http://www.station-drivers.com/index.php/downloads/Drivers/Renesas-Nec/USB-3.0/ version 3.x (3.0.23 or later preferred)]. Older versions of the driver have [http://marc.info/?l=libusb-devel&m=130934450111495&w=2 a bug] that prevents libusb from accessing devices. 

== Overview ==
=== About ===

This project adds Windows platform support to the '''[[Home|libusb]]''' Open Source library, in order to help developers easily communicate with USB devices on Windows.
Currently it supports the [http://msdn.microsoft.com/en-us/library/windows/hardware/ff540207.aspx WinUSB] and HID drivers for generic USB device access as well as the [http://sourceforge.net/p/libusb-win32/wiki/Home/ libusb-win32] and [https://sourceforge.net/projects/libusbk/ libusbK] drivers.

Take note libusb-win32 and libusbK are separated projects. libusb-win32 is a Windows only project which provide libusb-0.1 API compatible library for Windows and the associated kernel driver libusb0.sys. libusbK is a Windows only project which provides a new set of API for Windows (supporting WinUSB, libusb0.sys and libusbk.sys) and kernel driver libusbK.sys.

=== Binary Snapshots ===

Pre-built binary snapshots are provided in the [http://sourceforge.net/projects/libusb/files/ Sourceforge files] directory along with the source code archive. For later versions like 1.0.21 release, they are also in [https://github.com/libusb/libusb/releases github release page]<br />
The pre-built Windows binaries are provided AS IS for your convenience, generated for the following environments:

* Microsoft Visual Studio and DDK/WDK &rarr; MS32(32 bit) and MS64 (64 bit) directories
* MinGW -> MinGW32 (32 bit) and MinGW64 (64 bit) directories 

Note that these archives are provided in the <code>7z</code> format so you may have to install â€‹[http://www.7-zip.org/ 7-zip].

===vcpkg port ==
[https://github.com/microsoft/vcpkg vcpkg] now includes [https://github.com/microsoft/vcpkg/tree/master/ports/libusb libusb ports].

== Supported Environments ==

Supported systems are all Windows platforms, starting with Windows XP, and including 64 bit versions, with the following exceptions:
* Windows 2003 (Microsoft does not support WinUSB on 32bit/64bit Windows 2003)
* Windows XP 64 bit (Microsoft does not officially support WinUSB on 64bit Windows XP)

=== USB 3.x Support ===

libusb supports USB 3.x controllers and devices on Windows. Proprietary vendor controller drivers for Windows 7 and earlier as well as the Microsoft controller xHCI driver for Windows 8 are supported. If you are not using Windows 8 or later, you will be using vendor driver. Make sure you upgrade to the latest version of the driver if you encounter problems. 

If you are using a NEC/Renesas USB 3.0 controller, such as the fairly widespread <code>uPD720200</code>/<code>uPD720200A</code>, remember to make sure that your controller drivers are [http://www.station-drivers.com/index.php/10-drivers/42-renesas-nec version 2.1.16.0 or later]. Older versions of the drivers are known to have a bug that prevents access to USB devices.

=== Windows 8.x/10 Support ===

libusb was tested under Windows 8 and Windows 8.1, for both 32 and 64 bit, and no issues were found.

=== .NET support ===

A <code>.NET</code> version of libusb, called [http://libusbdotnet.sourceforge.net/V2/Index.html LibUsbDotNet], based on libusb 1.0, has been developed by Travis Lee Robinson. If you plan to use libusb in a <code>.NET</code> project, make sure you check out the latest release at [https://github.com/LibUsbDotNet/LibUsbDotNet github].

== How to use libusb on Windows ==

=== Driver Installation ===

If your target device is not HID, you '''must''' install a driver before you can communicate with it using libusb. Currently, this means installing one of Microsoft's <code>WinUSB</code>, [http://sourceforge.net/apps/trac/libusb-win32/wiki libusb-win32] or [http://libusbk.sourceforge.net/UsbK3/index.html libusbK] drivers. Two options are available:
* '''Recommended''': Use the most recent version of '''[http://zadig.akeo.ie Zadig]''', an Automated Driver Installer GUI application for <code>WinUSB (recommended)</code>, <code>libusb-win32 (not working well, not recommended)</code> and <code>libusbK (only if you hit WinUSB limitations)</code>.
* Alternatively, if you are only interested in <code>WinUSB</code>, you can download the [https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/libusb-winusb-wip/winusb%20driver.zip WinUSB driver files] and customize the <code>inf</code> file for your device.
* For version 1.0.21 or later, you can also use usbdk backend. [https://cgit.freedesktop.org/spice/win32/usbdk usbdk] provides another driver option for libusb Windows backend. For 1.0.21, usbdk is a compile-time option, but it becomes a runtime option from version 1.0.22 onwards, so you need to specify the usbdk backend using something like the following.
```
libusb_context * ctx = NULL;
libusb_init(&ctx);
libusb_set_option(ctx, LIBUSB_OPTION_USE_USBDK);
```
Note that if you install the libusb-win32 driver manually, you will also need to install the libusbK DLL, as all libusb-win32 accesses are done through it. One way to install/update libusbK.dll is to install libusbk development kit (libusbK-x.x.x.x-setup.exe from [http://sourceforge.net/projects/libusbk/ Sourceforge site] and choose to update the system files during the installation. However the support of libusb-win32/libusb0.sys (especially the filter mode) is not working well now, therefore you should not use libusb-win32/libusb0.sys for now.

=== Development Considerations ===

The handling of composite devices under Windows is done with multiple drivers, that are children of the <code>usbccgp.sys</code> driver (Composite Generic Parent), as this is the default for the OS. For more info, see ''"2. How Windows handles a composite device"'' at [http://forum.silabs.com/ubbthreads.php?ubb=showflat&Number=39797]. If needed, it is also possible to replace the composite parent driver to access the device.

Because Windows does not provide a native <code>poll()</code> function, and cygwin is the only development environment that provides such a call, the use of libusb file descriptors with <code>poll()</code> on cygwin is '''NOT''' supported. In a future version of libusb, we should provide better handling of native Windows events, but this will require a redesign of the libusb API, so it probably won't occur before libusb 2.0.

=== Known Restrictions ===

* <code>WinUSB</code> cannot be used to send an actual reset command to an USB device. This is a limitation of WinUSB. 
* <code>WinUSB</code> and <code>libusbK</code> cannot be used to set a device configuration that is [http://msdn.microsoft.com/en-us/library/windows/hardware/ff537060.aspx different from the first one]. This is a limitation of KMDF USB I/O Target. 
* <code>WinUSB</code> does not support multiple concurrent applications (as per the [https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/winusb-considerations Microsoft Windows Hardware Drivers documentation]).
* <code>WinUSB</code> does not support isochronous transfers under Windows XP/Vista/7/8. WinUSB under Windows 8.1 or later  supports isochronous transfer. libusb Windows supports isochronous transfer using the usbdk backend from version 1.0.21. libusb-1.0.22 adds isochronous support using libsubK driver. libusb-1.0.23 adds isochronous transfer support for WinUSB (Windows 8.1/10 or later).
* With <code>WinUSB</code>, when <code>LIBUSB_RECIPIENT_INTERFACE</code> is used for the transfer, the <code>WinUSB</code> DLL forces the low byte of <code>wIndex</code> to the interface number, regardless of what you set it to. 

**This is not a real limitation though, please refer to the [http://www.osronline.com/showthread.cfm?link=223812 OSR threads]. From Tim Roberts answer in that thread:
** <i>One can also argue that this is a security measure.  The USB spec requires that the low byte of wIndex be set to the interface number when the recipient is set to "interface".  Devices that use that field for other purposes are broken.</i>

* HID keyboards and mice cannot be accessed using the native HID driver as Windows reserves exclusive access to them.
* Multiple HID top level collections are currently not supported (only the first top level collection will be used).
* The HID Report Descriptors provided by libusb are recomposed and may present minor differences from the actual ones, as the Windows HID API does not allow to read them directly from the device.
* Windows HID API does not support custom Control Transfer, everything needs to be done through report. Please check out the discussion [http://janaxelson.com/forum/index.php?topic=1802.0 here].
* Because there is no native <code>poll()</code> on Windows, the ability to return externally pollable file descriptors on Windows <code>libusb_get_pollfd()</code> returns an error.
* If you use a composite device, and plan to install a libusb compatible driver for any of the interfaces, you should ensure that your driver package adds a Device Interface GUID in the registry, as proper enumeration of composite devices in libusb depends on it. This is typically achieved by adding something like the following in your inf:<br/><code>HKR,,DeviceInterfaceGUIDs,0x00010000,{12345678-1234-1234-1234-123456789ABC}</code><br> This is in particular a problem with libusb-win32's inf-wizard which will be deprecated by libusb-win32 project. Please use Zadig instead.
* <code>libusb0.sys and libusbk.sys</code> access is done through the libusbK DLL, therefore, if you plan to use the libusb-win32/libusb0.sys or libusbK/libusbk.sys driver in libusb, you must have that library installed. If using a recent version of Zadig, you should not have to do anything, at it will install the library for you. However the support of libusb0.sys is not ready, therefore you should not use libusb-win32/libusb0.sys for now.

== Development Links ==

* [https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/using-winusb-api-to-communicate-with-a-usb-device How to Use WinUSB to Communicate with a USB Device] & [https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/winusb-installation WinUSB (Winusb.sys) Installation].<br/>Note that the inf file given in the howto has a typo. If you don't change <code>SourceDisksFiles.NTamd64</code> to <code>SourceDisksFiles.amd64</code>, the driver installation will fail to copy the required DLLs on 64 bit systems...
* [https://www.osr.com/nt-insider/2009-issue2/using-winusb-user-mode-usb-device-communication/ Using WinUSB for User-Mode to USB Device Communication]
* [http://msdn.microsoft.com/en-us/library/ff540046.aspx#winusb WinUSB User-Mode Client Support Routines]
* [https://techcommunity.microsoft.com/t5/microsoft-usb-blog/bg-p/MicrosoftUSBBlog Microsoft's USB Core Team Blog]
* [https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/ Microsoft HW Development Center -- USB]
* [http://blogs.msdn.com/iliast/archive/2008/03/10/why-do-we-need-wdf-coinstallers.aspx additional] [http://blogs.msdn.com/iliast/archive/2009/08/13/wdf-logo-requirements-regarding-coinstallers.aspx information] about Windows Co-Installers
* [http://msdn.microsoft.com/en-us/library/x98tx3cf.aspx Finding Memory Leaks Using the CRT Library]
* [http://libusbk.sourceforge.net/UsbK3/index.html libusbK documentation]
* [https://github.com/pbatard/libwdi/wiki libwdi/Zadig Wiki]
* [https://github.com/microsoft/Windows-driver-samples/tree/master/setup/devcon Microsoft Devcon source code]
* [https://github.com/microsoft/Windows-driver-samples/tree/master/usb/usbview Microsoft USBView source code]

----
<center>[[CC_BY-SA.png|link=http://creativecommons.org/licenses/by-sa/3.0/]]</center>