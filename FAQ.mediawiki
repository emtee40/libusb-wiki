= Frequently Asked Questions =

== libusb.org, libusbx.org and libusb.info ==

libusb.org was the original home for libusb project. Now it still exists but the information and code are quite outdated.

libusb.info is the current home page for libusb project.

libusbx was a fork of libusb and libusbx.org is its website. As of 2014.01.26, libusbx project has been fully merged back into libusb and is being discontinued. libusbx.org is no longer related to libusb project.

== libusb-win32, libusbK and libusb project ==

Take note [https://sourceforge.net/p/libusb-win32/wiki/Home/ libusb-win32] and [http://libusbk.sourceforge.net/UsbK3/index.html libusbK] projects are separate projects and both of them use [https://lists.sourceforge.net/lists/listinfo/libusb-win32-devel libusb-win32 mailing list] for technical support. Unlike libusb which is a cross-platform project, libusb-win32 and libusbK project are both Windows only project.

libusb-win32 project includes libusb0.sys (Windows WDM kernel driver in device driver mode or filter driver mode) and libusb0.dll (libusb-win32 API, library). libusb-win32 API is a superset of the libusb-0.1 API supported by libusb-compat. libusb0.dll supports device using libusb0.sys and libusbK.sys.

libusbK projects includes libusbk.sys (Windows KMDF kernel driver) and libusbK.dll (libusbK API, library). libusbK API is Windows only and libusbk.dll supports device using libusbK.sys, libusb0.sys and WinUSB.

libusb Windows backend can support device using libusbK.sys (and libusb0.sys driver -- not recommended due to issues) through libusbk.dll provided by libusbK project. If libusbk.dll is present, it will use libusbK.dll as the intermediate library to support device using WinUSB driver. If libusbK.dll is not present, then it will directly talk to device using WinUSB using WinUSB API. libusb Windows also supports device using generic HID driver or usbdk driver.

In summary, there is no Windows kernel driver involved in the libusb project. It is purely a user space library. It supports multiple kernel drivers.

1) WinUSB.sys kernel driver from Microsoft, through WinUSB.dll from Microsoft (if libusbk.dll is not present), or through libusbk.dll from libusbk project

libusb-1.0.dll --> WinUSB.dll --> WinUSB.sys (if libusbk.dll is not present)

libusb-1.0.dll --> libusbk.dll --> WinUSB.dll --> WinUSB.sys

2) libusbk.sys kernel from libusbk project, through libusbk.dll from libusbk project

libusb-1.0.dll --> libusbk.dll --> libusbk.sys

3) libusb0.sys kernel from libusb-win32 project, through libusbk.dll from libusbk project

libusb-1.0.dll --> libusbk.dll --> libusb0.sys

4) Windows HID driver

5) usbdk driver from usbdk project

In terms of support, WinUSB is first class supported driver for libusb project, followed by libusbk.sys, then usbdk/HID/libusb0.sys which may have more issues.

== What about usbdk? ==

[https://github.com/daynix/UsbDk usbdk] is another open-source generic USB driver. usbdk is a new backend added in libusb-1.0.21 release. The major benefit is that you can keep the existing driver. It supports isochronous transfer as well.

== Licensing ==

=== What is the libusb license? ===

libusb is released under version 2.1 of the [http://www.gnu.org/licenses/lgpl-2.1.html GNU Lesser General Public License (LGPL)].

=== Can I use libusb in a proprietary application? ===

You can, as long as you don't modify its source code.<br />
If you modify the source, then you must make any changes you applied to libusb public, and grant others the right to use these changes in their own applications, under the LGPL v2.1 license terms.

== Getting help ==

=== How can I get help? What is the best practice to describe my issues? ===

Please read the libusb [https://github.com/libusb/libusb/wiki/Troubleshooting Troubleshooting] page and use the [https://github.com/libusb/libusb/wiki#wiki-Support mailing list] for support.

Please also read the Wiki pages including this FAQ page as well as [http://libusb.sourceforge.net/api-1.0/libusb_caveats.html libusb caveats].

=== I tried to post to the libusb mailing list but it failed. Why? ===

You have to [https://lists.sourceforge.net/lists/listinfo/libusb-devel subscribe] to the mailing list in order to post.

== Running libusb ==

=== Can I run libusb application on Linux when there is already a kernel driver attached to it? ===

Yes you can. Please detach the kernel driver by calling libusb_detach_kernel_driver() so that you can use libusb. Please take note you need to have the correct privilege to do that. Take note this function is only available for Linux. Better way is to use udev rules to unbind the kernel driver.

=== Can I run libusb application on Linux when there is already another application which has already claimed the interface? ===
You have to exit the other application. If not and libusb_set_configuration() and libusb_claim_interface() will fail. Take note if the other application is the kernel driver, you have to detach the kernel driver.

=== Can I run libusb applications on Linux without root privilege? ===

Yes.<br/>
The standard solution is to use udev rules. Here are some links to udev related websites.
* [http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev/udev.html udev homepage ]
* [http://wiki.debian.org/udev Debian's udev overview]
* [http://www.reactivated.net/udevrules.php Writing udev rules]
* [http://vger.kernel.org/vger-lists.html#linux-hotplug Proper place to ask questions about udev rules]

=== How can I run libusb applications under Mac OS X if there is already a kernel extension installed for the device and claim exclusive access? ===

If there is no existing kernel extension installed for the device, libusb will run out of the box, you do not even need to have root privilege and there is no need to set up udev rules like Linux. However, if there is an existing kernel extension installed for the device, then it is more troublesome. There are ways to  get libusb working and they all require some interventions as root.

1) You can use kextunload to unload the kernel extension. You need to run the command as root. Take note this may not be possible for drivers like USB HID since it may be used by other USB HID device. Take note that the kextunload command will lose its effect in the next boot. 
    sudo kextunload -b com.apple.driver.AppleUSBFTDI 
The above command will unload the Apple provided FTDI driver (Mac OS X Mavericks or later).
    sudo kextunload FTDIUSBSerialDriver.kext
The above command will unload the FTDI provided VCP driver.

2) You can use a codeless kext to prevent the kernel driver from attaching to the device. Take note that OS X Mavericks and later require that the kext be signed using a special Developer ID.

Please read the following two Apple technical notes for more details about writing a codeless kext.
* [https://developer.apple.com/library/mac/technotes/tn2315/_index.html Technical Note TN2315: Introducing the Apple AppleUSBFTDI kernel driver ] 
* [https://developer.apple.com/library/mac/qa/qa1076/_index.html Technical Q&A QA1076: Tips on USB driver matching for Mac OS X]

3) In certain cases, you can manually edit the Info.plist configuration file of a kernel extension to prevent it from loading for certain VID/PID combination.

For example, in the case of Apple provided FTDI driver, you can edit the following file to comment out
the key/dict sections of the desired VID/PID combination.
    /System/Library/Extensions/IOUSBFamily.kext/Contents/PlugIns/AppleUSBFTDI.kext/Contents/Info.plist

Once you finish the editing, you can issue the following two commands and everything should work after that.
    sudo kextunload -bundle com.apple.driver.AppleUSBFTDI
    sudo kextload -bundle com.apple.driver.AppleUSBFTDI

Reference: 
* [http://alvarop.com/2014/01/using-busblaster-openocd-on-osx-mavericks/] (Dead link now).
* [https://embeddedartistry.com/blog/2017/06/26/osx-getting-pesky-ftdi-debugging-devices-to-work/]
Take note the location may be different in different macOS version. 

For macOS Catalina(10.15) and later, Apple FTDI driver is now a Driverkit extension named com.apple.DriverKit-AppleUSBFTDI. (Note: it seems to work with libusb out of the box under Mac Mini M1 Big Sur even though the driver and the serial port are present).

Updates in Feb 2022: with the merging of pull request #911, support for detaching kernel drivers with authorization has been added. This has been included in the upcoming 1.0.25 release. Take note the underlying macOS capture APIs only work on the whole device and not on individual interfaces. So this will force all the kernel extensions (drivers) bound to all the interfaces of a USB Composite devices to be released (Issue #920). You will need to get the entitlement from Apple Developer support, create a provisioning profile with that entitlement, and build your app with that profile. 

Please take note that command line apps cannot use provisioning profiles and therefore cannot hold this entitlement so you have to run as root. As for the GUI application, as of now APple support is saying that `com.apple.vm.device-access` entitlement is not the right entitlement. So basically there is no solution as of now. This means libusb (and libraries like libuvc which uses libusb) may not be the right library to use if you hit this issue (Issue #972 and Issue #1014).

=== How to use libusb under Windows? ===

Please refer to the following Wiki page:<br>
[https://github.com/libusb/libusb/wiki/Windows#How_to_use_libusb_on_Windows] 

Basically you will need to install a supported driver.

* If your device is a generic HID device, no extra driver is needed since it is supported. But HIDAPI is recommended for HID device than libusb Windows.
* If your device uses WinUSB driver, no extra driver is needed since it is supported natively.
* If your device uses libusbK driver, you should be set as well (libusbK.dll should have been installed).
* If your device uses libusb-win32 (libusb0.sys) device driver, please switch to libusbK driver.
* If your device uses libusb-win32 filter driver, please uninstall the filter driver and try usbdk instead.
* If your device uses other driver, and you do want to keep using the existing driver, then try usbdk.
* If your device uses other driver and you are okay with switching drivers, then switch to WinUSB (preferred) or libusbK driver.

=== Can libusb be used on the USB device side, e.g. Linux Gadget Device? ===

No.<br/>
libusb only provides an API for writing software on the host. Of course, if the device also acts as a USB host then libusb could still be useful, but only for the host part of the device.

=== Can I use libusb to open a file on an USB storage device? ===

Yes.<br/>
libusb can be used for low-level communication with USB Mass Storage Class devices. But in order to access a file on such a device you must first implement Mass Storage Class, SCSI and the particular file system used on the device, most commonly <code>FAT32</code>. 

However, libusb will not do this part for you. In a word, do not use libusb for USB mass storage device.

But you can find a limited example of how to read a data block through Mass Storage using libusb in the mass_storage test from the [https://github.com/libusb/libusb/blob/master/examples/xusb.c ​xusb.c] sample of the the ​libusb distribution.

=== Does libusb support USB 3.0,3.1,3.2,4? ===

Yes (as long as the underlying OS supports the corresponding USB version too).

=== My device works when plugged on an USB 2.0 port but not on an USB 3.x/4 one ===

If you encounter such an issue, you should report it to the libusb mailing-list.

But please take note of the OS support of USB 3.x/USB4.

For instance, USB 3.0 support for Windows 7 and earlier is very much dependent on individual drivers, which are provided by the USB controller manufacturer, and not Microsoft. Some of these have been known to have bugs. Only Windows 8/8.1/10 and later have an official USB 3.0 stack that originates from Microsoft.

For Linux, the xHCI driver may also not be as mature as the other host controller driver if you use older kernel versions. Please try to upgrade to later version of the kernel whenever possible to have better support.

For Mac OS X, xHCI support may not be so good in older versions like Mac OS X Mountain Lion. Whenever possible, please upgrade to later version of Mac OS X for better support.

=== Does libusb support USB HID devices? ===
If your application will revolve around HID access, you are strongly encouraged to try to use the ​[https://github.com/libusb/hidapi HIDAPI library], which is also cross-platform. It uses native HID API under Windows and Mac OS X. It use either hidraw or libusb as the backend under Linux.

libusb was widely used to access USB HID device under Linux for historical reasons so there may be use cases to use libusb for HID device due to existing code base or for platforms without HIDAPI support. However, the level of support as well as the ease of access of HID devices, depends on the platform you will be running libusb on. 

On Linux, you must detach the kernel HID driver for libusb to communicate with the device, but the libusb API can do this for you. If you have a relevant udev rule, you should also be able to perform that operation without requiring root privileges. Still HIDAPI is recommended for new development.

On Mac OS X, you must install a codeless kext kernel driver and then reboot, before you will be able communicate with the device. This may not be easy with the release of later Mac OS X versions. So it is not recommended. HIDAPI should be the library of choices if you need Mac OS X support.

On Windows, the native Windows HID driver is supported by libusb, but there are some limitations, such as not being able to access HID mice and keyboards since they are system reserved, as well as getting a direct read of HID report descriptors.

Under NetBSD/OpenBSD, you may have to rebuild the kernel in order to use libusb with the HID device. Please refer to the  [http://www.apcupsd.com/manual/manual.html#bsd-usb-configuration apcupsd page]. 

In general, you may find HIDAPI a better library for HID device.

== Platform Support ==

=== Does libusb support Windows RT? ===

No.<br/>
Windows RT is locked by Microsoft, which means that users cannot install the applications or library of their choice. As such, libusb has no plans to support Windows RT.

=== Does libusb support Apple iOS device? ===

No.
=== Does libusb support Apple Sillicon based Mac ===

Yes.<br>

One way to build libusb binary for both x86_64 in addition to arm64 is as following if you do not use homebrew.<br>
1. Install Xcode Ver12.2 or later<br>
2. Clone the newest libusb from git<br>
3. Open the Xcode project from /libusb/Xcode/libusb.xcodeproj<br>
4. Choose the build option to "Any Mac" which means both ARM64 and X86_64<br>
5. Edit the Run Scheme to Release and then build the project.<br>
6. Show the "libusb-1.0.0.dylib" in Finder then copy it to /usr/local/lib<br>
7. Copy the "libusb.h" to /usr/local/include/libusb-1.0 <br>

If you use Homebrew, you can use x86_64 and arm64 homebrew at the same time using different directories . Please follow the official Homebrew instructions.

=== Does libusb support Hackintosh? ===
Not officially supported. If you encounter issues, please check if the issues are present in official Apple Macs or not.

=== Does libusb support Windows CE based device? ===

Yes.<br>

Please refer to the Windows CE related information in the following file.<br>
[https://github.com/libusb/libusb/blob/master/INSTALL_WIN.txt]

Note: Windows CE support has been removed in 1.0.24.

=== Does libusb support Android? ===

Yes.</br>
However, this will only work if your device has USB host support (also known as USB On-The-Go) and if you have sufficient privileges to run in host mode (which usually requires a "rooted" device).
Please check the [https://github.com/libusb/libusb/tree/master/android android] directory for more info.

Currently there are also multiple issues reported by the user. Please check the existing tickets as well to see if you can sort out the issues from the hints in the tickets. Version 1.0.24 has made quite some improvements on Android side and you should use version 1.0.24 or later.

An important tip of using the API  libusb_wrap_sys_device under Android is mentioned[https://marc.info/?l=libusb-devel&m=160832455725344&w=2 here].
It is also mentioned in [https://github.com/libusb/libusb/issues/717 Issue #717].

=== Does libusb work under Virtual Machines? ===

Yes.</br>
However, VMs, especially VirtualBox, may have not very good implementation of the USB stack. If you encounter issues with libusb on VMs, run it under non-VMs first to see if that works or not. It it works under non-VMs but not under VMs, you may have to get help from the VM vendor or community. 


=== Known quirks/differences between libusb-compat-0.1 and legacy libusb-0.1 ===

* usb_resetep(), a previously deprecated function, is implemented as equivalent to calling usb_clear_halt().

* libusb-0.1 allowed you to open a device which you did not have permission to do anything useful with (all I/O requests would immediately fail). libusb-compat-0.1 does not allow you to open such devices. You can still read descriptor info without opening a device.

* usb_device's "num_children" attribute is hardcoded to 0, and "children" is hardcoded to NULL. Do you need this information in your software? Let us know on the mailing list, and we'll add it.

* Some libusb-0.1 users may have implemented I/O cancellation by running transfers in their own threads and simply killing the thread when they don't want to do the transfer any more. This is bad programming practice for obvious reasons, and this lack of functionality was one of the primary drivers for libusb-1.0 development. With libusb-1.0 or libusb-compat-0.1 backed by libusb-1.0, forcefully killing threads in this way is likely to cause all libusb I/O to halt. Instead, port your application to use libusb-1.0's asynchronous transfer API, which supports transfer cancellation.

* Error codes returned on certain events may not exactly match the error codes returned by libusb-0.1. Patches accepted to bring us closer to the behaviour of libusb-0.1 on Linux.

* The internal structure of usb_dev_handle is different from libusb-0.1. Of course, since this is a purely internal structure, that shouldn't cause any problems. In reality, some libusb-0.1 users make assumptions about what is inside (bad programming practice) and those assumptions are no longer true, resulting in broken software.

* libusb-1.0 and libusb-0.1-compat may be slower in listing the devices under Linux compared to libusb-0.1. Please refer to ticket https://github.com/libusb/libusb/issues/237. libusb 0.1 finds devices through devtmpfs by scanning /dev/bus/usb. These device nodes are likely to show up quite soon after the device is enumerated. libusb 1.0 listens for uevents from the kernel through a netlink socket. There are quite a few uevents that the kernel sends out while setting up a new device, only one of which tells libusb that a new device has arrived. This also happens in a dedicated thread, so there may be scheduling latencies at play. One potential workaround is to build libusb with netlink and not udev.

----
<center>[[CC_BY-SA.png|link=http://creativecommons.org/licenses/by-sa/3.0/]]</center>